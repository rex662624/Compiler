/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE

extern int yylineno;//行數

void AllocAndCopy(char*);

//----OLD
	int linecount=0;
	int commentline=0;
	int doubleComment=0;//查看是否有同一行複數個comment
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { return ADD; }
"-" 	{ return SUB; }
"*" 	{ return MUL; }
"/" 	{ return DIV; }
"%"     { return MOD; }
"++"    { return INC; }
"--"    { return DEC; }

 /* Relational */
">"		{ return GT; }
"<"		{ return LT; }
">="	{ return GE; }
"<="	{ return LE; }
"=="	{ return EQ; }
"!="	{ return NE; }

 /* Assignment */
"="		{ return ASSIGN; }
"+="	{ return ADD_ASSIGN; }
"-="	{ return SUB_ASSIGN; }
"*="	{ return MUL_ASSIGN; }
"/="	{ return DIV_ASSIGN; }
"%="	{ return MOD_ASSIGN; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR; }
"!"		{ return NOT; }

 /* Delimiters */
"("		{ return '('; }
")"		{ return ')'; }
"{"		{ return LB2; }
"}"		{ return RB2; }

 /* Print Keywords */	
"print"		{ return PRINT; }
"println"	{ return PRINTLN; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
"for"		{ return FOR; }

 /* Declaration Keywords */
"var"		{ AllocAndCopy(yytext); return VAR; }
"void"		{ AllocAndCopy(yytext); return VOID; }
"int"		{ AllocAndCopy(yytext);	return INT; }
"float32"	{ AllocAndCopy(yytext); return FLOAT; }

 /* String Constant */
\"[^\n"]+\" {
			//防止memory leak 再重新malloc 並copy
			AllocAndCopy(yytext);
			return STRING;}

 /* Number Constant */
{integer}	{ sscanf(yytext,"%d",&yylval.val.i_val);
				yylval.val.type=1;
				return I_CONST;
			}
{double}	{ sscanf(yytext,"%lf",&yylval.val.f_val);
				yylval.val.type=0;
				return F_CONST;
			}

 /* C type Comment */
"/""*"[^*]*[*]+([^*/][^*]*[*]+)*"/" {
					
	printf("%s \t C++ Comment \n",yytext);
	commentline++;
	//解決一行有兩個以上的註解
	if(doubleComment==1)commentline--;
	//解決註解橫跨多行
	int i ;
    for(i=0;i<yyleng;i++)
    	if(yytext[i]=='\n')
		{
		commentline++;
		linecount++;
		}	
	doubleComment=1;	
	
	return C_COMMENT;
	}

 /* C++ type Comment */
"//".* { 
	printf("%s \t C++ Comment \n",yytext);commentline++;
	if(doubleComment==1)commentline--;
 	return C_COMMENT;
	}

 /* Variable ID */
 {id}       {AllocAndCopy(yytext);return ID;}

 /* others */

[\n]		{yylineno++;return NEWLINE;}
[ \t]		{;} /* Ignore */
[^; \t] 	{;} /* Ignore other charactor sets */
<<EOF>>     {yyterminate();}

%%

int yywrap()
{
    return 1;
}

void AllocAndCopy(char * yytext){//先free掉原來的再new新的
//    if(yylval.string) free(yylval.string); free掉會出錯(有空搞懂)
    yylval.string=malloc(sizeof(yytext+1));
	strcpy(yylval.string,yytext);
}  
